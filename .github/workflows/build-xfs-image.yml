name: Build and Release Debian 13 (Trixie) XFS Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends qemu-utils libguestfs-tools xfsprogs libguestfs-xfs

      - name: Configure libguestfs for CI Environment
        run: |
          sudo mkdir -p /etc/libguestfs-tools.d
          echo 'apparmor_disable = 1' | sudo tee /etc/libguestfs-tools.d/99-apparmor-disable.conf

      - name: Download Debian 13 (Trixie) Cloud Image
        run: |
          wget -O original.qcow2 https://cdimage.debian.org/images/cloud/trixie/daily/latest/debian-13-nocloud-amd64-daily.qcow2

      - name: Define Image Filename
        id: image_info
        run: echo "filename=debian-13-xfs.qcow2" >> $GITHUB_OUTPUT

      - name: Resize, Convert, and Sparsify Image
        run: |
          set -ex
          
          IMAGE_NAME=${{ steps.image_info.outputs.filename }}
          UNCOMPACTED_IMAGE_NAME="debian-13-xfs-uncompacted.qcow2"

          # 步骤 1: 创建目标镜像并调整原始镜像分区
          qemu-img create -f qcow2 -o compression_type=zlib $UNCOMPACTED_IMAGE_NAME 10G
          chmod 666 $UNCOMPACTED_IMAGE_NAME
          sudo virt-resize --expand /dev/sda1 original.qcow2 $UNCOMPACTED_IMAGE_NAME
          
          # 步骤 2: 动态查找根分区 (最终健壮版)
          echo "Finding the root partition in the resized image by its filesystem type (ext4)..."
          # 不再依赖挂载点'/'，而是直接查找ext4文件系统，因为它是转换前的格式
          ROOT_PARTITION=$(sudo virt-filesystems --long --filesystems -a $UNCOMPACTED_IMAGE_NAME | grep -w 'ext4' | awk '{print $1}')
          
          if [ -z "$ROOT_PARTITION" ]; then
            echo "::error::Could not find the ext4 root partition to convert."
            echo "::debug::virt-filesystems output:"
            sudo virt-filesystems --long --all -a $UNCOMPACTED_IMAGE_NAME
            exit 1
          fi
          echo "Root partition to be converted found: $ROOT_PARTITION"

          # 步骤 3: 使用找到的根分区名进行文件系统转换
          echo "Converting filesystem on $ROOT_PARTITION to XFS using virt-rescue..."
          sudo virt-rescue --rw -a $UNCOMPACTED_IMAGE_NAME --sh "fstransform ${ROOT_PARTITION} xfs"
          echo "Filesystem conversion to XFS complete."
          
          # 步骤 4: 使用找到的根分区名进行挂载和零填充
          echo "Zeroing out free space using guestfish..."
          # fstransform 之后，文件系统已经是 xfs，所以 guestfish 可以识别并挂载它
          sudo guestfish --rw -a $UNCOMPACTED_IMAGE_NAME <<EOF
          run
          mount ${ROOT_PARTITION} /
          sh "dd if=/dev/zero of=/zero.file bs=4M status=progress || true"
          rm /zero.file
          umount /
          EOF
          echo "Free space zeroed out."
          
          sudo sync
          
          # 步骤 5: 最终压缩
          qemu-img convert -c -O qcow2 $UNCOMPACTED_IMAGE_NAME $IMAGE_NAME
          
          echo "Image sparsified. Final physical size:"
          ls -lh $IMAGE_NAME

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.image_info.outputs.filename }}
          tag_name: debian-13-xfs-${{ GITHUB.RUN_ID }}
          name: "Debian 13 XFS Image Build ${{ GITHUB.RUN_ID }}"
          prerelease: true
